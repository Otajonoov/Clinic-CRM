// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: doctor/doctor.proto

package doctor

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DoctorType struct {
	DoctorType           string   `protobuf:"bytes,1,opt,name=doctor_type,json=doctorType,proto3" json:"doctor_type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorType) Reset()         { *m = DoctorType{} }
func (m *DoctorType) String() string { return proto.CompactTextString(m) }
func (*DoctorType) ProtoMessage()    {}
func (*DoctorType) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{0}
}
func (m *DoctorType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorType.Merge(m, src)
}
func (m *DoctorType) XXX_Size() int {
	return m.Size()
}
func (m *DoctorType) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorType.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorType proto.InternalMessageInfo

func (m *DoctorType) GetDoctorType() string {
	if m != nil {
		return m.DoctorType
	}
	return ""
}

type DoctorTypes struct {
	DoctorTypes          []*DoctorType `protobuf:"bytes,1,rep,name=doctor_types,json=doctorTypes,proto3" json:"doctor_types"`
	Count                int64         `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DoctorTypes) Reset()         { *m = DoctorTypes{} }
func (m *DoctorTypes) String() string { return proto.CompactTextString(m) }
func (*DoctorTypes) ProtoMessage()    {}
func (*DoctorTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{1}
}
func (m *DoctorTypes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorTypes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorTypes.Merge(m, src)
}
func (m *DoctorTypes) XXX_Size() int {
	return m.Size()
}
func (m *DoctorTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorTypes.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorTypes proto.InternalMessageInfo

func (m *DoctorTypes) GetDoctorTypes() []*DoctorType {
	if m != nil {
		return m.DoctorTypes
	}
	return nil
}

func (m *DoctorTypes) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type DocPageFilter struct {
	ClientId             int64    `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Page                 int64    `protobuf:"varint,3,opt,name=page,proto3" json:"page"`
	FromDate             string   `protobuf:"bytes,4,opt,name=from_date,json=fromDate,proto3" json:"from_date"`
	ToDate               string   `protobuf:"bytes,5,opt,name=to_date,json=toDate,proto3" json:"to_date"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DocPageFilter) Reset()         { *m = DocPageFilter{} }
func (m *DocPageFilter) String() string { return proto.CompactTextString(m) }
func (*DocPageFilter) ProtoMessage()    {}
func (*DocPageFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{2}
}
func (m *DocPageFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocPageFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocPageFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocPageFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocPageFilter.Merge(m, src)
}
func (m *DocPageFilter) XXX_Size() int {
	return m.Size()
}
func (m *DocPageFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_DocPageFilter.DiscardUnknown(m)
}

var xxx_messageInfo_DocPageFilter proto.InternalMessageInfo

func (m *DocPageFilter) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *DocPageFilter) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DocPageFilter) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *DocPageFilter) GetFromDate() string {
	if m != nil {
		return m.FromDate
	}
	return ""
}

func (m *DocPageFilter) GetToDate() string {
	if m != nil {
		return m.ToDate
	}
	return ""
}

type DocPageFilterRes struct {
	PatientInfo          []*DocPage         `protobuf:"bytes,1,rep,name=patient_info,json=patientInfo,proto3" json:"patient_info"`
	DoctorReport         []*DoctorReportRes `protobuf:"bytes,2,rep,name=doctor_report,json=doctorReport,proto3" json:"doctor_report"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DocPageFilterRes) Reset()         { *m = DocPageFilterRes{} }
func (m *DocPageFilterRes) String() string { return proto.CompactTextString(m) }
func (*DocPageFilterRes) ProtoMessage()    {}
func (*DocPageFilterRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{3}
}
func (m *DocPageFilterRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocPageFilterRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocPageFilterRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocPageFilterRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocPageFilterRes.Merge(m, src)
}
func (m *DocPageFilterRes) XXX_Size() int {
	return m.Size()
}
func (m *DocPageFilterRes) XXX_DiscardUnknown() {
	xxx_messageInfo_DocPageFilterRes.DiscardUnknown(m)
}

var xxx_messageInfo_DocPageFilterRes proto.InternalMessageInfo

func (m *DocPageFilterRes) GetPatientInfo() []*DocPage {
	if m != nil {
		return m.PatientInfo
	}
	return nil
}

func (m *DocPageFilterRes) GetDoctorReport() []*DoctorReportRes {
	if m != nil {
		return m.DoctorReport
	}
	return nil
}

type DocPage struct {
	QueueNumber          int64    `protobuf:"varint,1,opt,name=queue_number,json=queueNumber,proto3" json:"queue_number"`
	FullName             string   `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name"`
	PhoneNumber          string   `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	DateLastVisit        string   `protobuf:"bytes,4,opt,name=date_last_visit,json=dateLastVisit,proto3" json:"date_last_visit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DocPage) Reset()         { *m = DocPage{} }
func (m *DocPage) String() string { return proto.CompactTextString(m) }
func (*DocPage) ProtoMessage()    {}
func (*DocPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{4}
}
func (m *DocPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocPage.Merge(m, src)
}
func (m *DocPage) XXX_Size() int {
	return m.Size()
}
func (m *DocPage) XXX_DiscardUnknown() {
	xxx_messageInfo_DocPage.DiscardUnknown(m)
}

var xxx_messageInfo_DocPage proto.InternalMessageInfo

func (m *DocPage) GetQueueNumber() int64 {
	if m != nil {
		return m.QueueNumber
	}
	return 0
}

func (m *DocPage) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *DocPage) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *DocPage) GetDateLastVisit() string {
	if m != nil {
		return m.DateLastVisit
	}
	return ""
}

type LowStockRes struct {
	LowStock             []*SqladRes `protobuf:"bytes,1,rep,name=low_stock,json=lowStock,proto3" json:"low_stock"`
	Count                int64       `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LowStockRes) Reset()         { *m = LowStockRes{} }
func (m *LowStockRes) String() string { return proto.CompactTextString(m) }
func (*LowStockRes) ProtoMessage()    {}
func (*LowStockRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{5}
}
func (m *LowStockRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LowStockRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LowStockRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LowStockRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LowStockRes.Merge(m, src)
}
func (m *LowStockRes) XXX_Size() int {
	return m.Size()
}
func (m *LowStockRes) XXX_DiscardUnknown() {
	xxx_messageInfo_LowStockRes.DiscardUnknown(m)
}

var xxx_messageInfo_LowStockRes proto.InternalMessageInfo

func (m *LowStockRes) GetLowStock() []*SqladRes {
	if m != nil {
		return m.LowStock
	}
	return nil
}

func (m *LowStockRes) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SqladId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SqladId) Reset()         { *m = SqladId{} }
func (m *SqladId) String() string { return proto.CompactTextString(m) }
func (*SqladId) ProtoMessage()    {}
func (*SqladId) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{6}
}
func (m *SqladId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SqladId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SqladId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SqladId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SqladId.Merge(m, src)
}
func (m *SqladId) XXX_Size() int {
	return m.Size()
}
func (m *SqladId) XXX_DiscardUnknown() {
	xxx_messageInfo_SqladId.DiscardUnknown(m)
}

var xxx_messageInfo_SqladId proto.InternalMessageInfo

func (m *SqladId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SqladGetReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SqladGetReq) Reset()         { *m = SqladGetReq{} }
func (m *SqladGetReq) String() string { return proto.CompactTextString(m) }
func (*SqladGetReq) ProtoMessage()    {}
func (*SqladGetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{7}
}
func (m *SqladGetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SqladGetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SqladGetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SqladGetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SqladGetReq.Merge(m, src)
}
func (m *SqladGetReq) XXX_Size() int {
	return m.Size()
}
func (m *SqladGetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SqladGetReq.DiscardUnknown(m)
}

var xxx_messageInfo_SqladGetReq proto.InternalMessageInfo

func (m *SqladGetReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *SqladGetReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SqladReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Count                int64    `protobuf:"varint,3,opt,name=count,proto3" json:"count"`
	Price                float64  `protobuf:"fixed64,4,opt,name=price,proto3" json:"price"`
	LowStock             int64    `protobuf:"varint,5,opt,name=low_stock,json=lowStock,proto3" json:"low_stock"`
	ExpirationDate       string   `protobuf:"bytes,6,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date"`
	Provider             string   `protobuf:"bytes,7,opt,name=provider,proto3" json:"provider"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SqladReq) Reset()         { *m = SqladReq{} }
func (m *SqladReq) String() string { return proto.CompactTextString(m) }
func (*SqladReq) ProtoMessage()    {}
func (*SqladReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{8}
}
func (m *SqladReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SqladReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SqladReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SqladReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SqladReq.Merge(m, src)
}
func (m *SqladReq) XXX_Size() int {
	return m.Size()
}
func (m *SqladReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SqladReq.DiscardUnknown(m)
}

var xxx_messageInfo_SqladReq proto.InternalMessageInfo

func (m *SqladReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SqladReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SqladReq) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SqladReq) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SqladReq) GetLowStock() int64 {
	if m != nil {
		return m.LowStock
	}
	return 0
}

func (m *SqladReq) GetExpirationDate() string {
	if m != nil {
		return m.ExpirationDate
	}
	return ""
}

func (m *SqladReq) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type SqladRes struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Count                int64    `protobuf:"varint,3,opt,name=count,proto3" json:"count"`
	Price                float64  `protobuf:"fixed64,4,opt,name=price,proto3" json:"price"`
	LowStock             int64    `protobuf:"varint,5,opt,name=low_stock,json=lowStock,proto3" json:"low_stock"`
	ExpirationDate       string   `protobuf:"bytes,6,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date"`
	Provider             string   `protobuf:"bytes,7,opt,name=provider,proto3" json:"provider"`
	CreatedAt            string   `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SqladRes) Reset()         { *m = SqladRes{} }
func (m *SqladRes) String() string { return proto.CompactTextString(m) }
func (*SqladRes) ProtoMessage()    {}
func (*SqladRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{9}
}
func (m *SqladRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SqladRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SqladRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SqladRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SqladRes.Merge(m, src)
}
func (m *SqladRes) XXX_Size() int {
	return m.Size()
}
func (m *SqladRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SqladRes.DiscardUnknown(m)
}

var xxx_messageInfo_SqladRes proto.InternalMessageInfo

func (m *SqladRes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SqladRes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SqladRes) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SqladRes) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SqladRes) GetLowStock() int64 {
	if m != nil {
		return m.LowStock
	}
	return 0
}

func (m *SqladRes) GetExpirationDate() string {
	if m != nil {
		return m.ExpirationDate
	}
	return ""
}

func (m *SqladRes) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *SqladRes) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *SqladRes) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type ReportId struct {
	ReportId             string   `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportId) Reset()         { *m = ReportId{} }
func (m *ReportId) String() string { return proto.CompactTextString(m) }
func (*ReportId) ProtoMessage()    {}
func (*ReportId) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{10}
}
func (m *ReportId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportId.Merge(m, src)
}
func (m *ReportId) XXX_Size() int {
	return m.Size()
}
func (m *ReportId) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportId.DiscardUnknown(m)
}

var xxx_messageInfo_ReportId proto.InternalMessageInfo

func (m *ReportId) GetReportId() string {
	if m != nil {
		return m.ReportId
	}
	return ""
}

type DoctorReportsResp struct {
	DoctorReports        []*DoctorReportRes `protobuf:"bytes,1,rep,name=doctor_reports,json=doctorReports,proto3" json:"doctor_reports"`
	Count                int64              `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DoctorReportsResp) Reset()         { *m = DoctorReportsResp{} }
func (m *DoctorReportsResp) String() string { return proto.CompactTextString(m) }
func (*DoctorReportsResp) ProtoMessage()    {}
func (*DoctorReportsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{11}
}
func (m *DoctorReportsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorReportsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorReportsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorReportsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorReportsResp.Merge(m, src)
}
func (m *DoctorReportsResp) XXX_Size() int {
	return m.Size()
}
func (m *DoctorReportsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorReportsResp.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorReportsResp proto.InternalMessageInfo

func (m *DoctorReportsResp) GetDoctorReports() []*DoctorReportRes {
	if m != nil {
		return m.DoctorReports
	}
	return nil
}

func (m *DoctorReportsResp) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type DoctorReportsFindReq struct {
	Limit                int64    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit"`
	Page                 int64    `protobuf:"varint,2,opt,name=page,proto3" json:"page"`
	Search               string   `protobuf:"bytes,3,opt,name=search,proto3" json:"search"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorReportsFindReq) Reset()         { *m = DoctorReportsFindReq{} }
func (m *DoctorReportsFindReq) String() string { return proto.CompactTextString(m) }
func (*DoctorReportsFindReq) ProtoMessage()    {}
func (*DoctorReportsFindReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{12}
}
func (m *DoctorReportsFindReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorReportsFindReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorReportsFindReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorReportsFindReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorReportsFindReq.Merge(m, src)
}
func (m *DoctorReportsFindReq) XXX_Size() int {
	return m.Size()
}
func (m *DoctorReportsFindReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorReportsFindReq.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorReportsFindReq proto.InternalMessageInfo

func (m *DoctorReportsFindReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DoctorReportsFindReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *DoctorReportsFindReq) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

type GetDoctorReport struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDoctorReport) Reset()         { *m = GetDoctorReport{} }
func (m *GetDoctorReport) String() string { return proto.CompactTextString(m) }
func (*GetDoctorReport) ProtoMessage()    {}
func (*GetDoctorReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{13}
}
func (m *GetDoctorReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDoctorReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDoctorReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDoctorReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDoctorReport.Merge(m, src)
}
func (m *GetDoctorReport) XXX_Size() int {
	return m.Size()
}
func (m *GetDoctorReport) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDoctorReport.DiscardUnknown(m)
}

var xxx_messageInfo_GetDoctorReport proto.InternalMessageInfo

func (m *GetDoctorReport) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *GetDoctorReport) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type DoctorReport struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	ClientId             string   `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id"`
	DoctorId             string   `protobuf:"bytes,3,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	Text                 string   `protobuf:"bytes,4,opt,name=text,proto3" json:"text"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorReport) Reset()         { *m = DoctorReport{} }
func (m *DoctorReport) String() string { return proto.CompactTextString(m) }
func (*DoctorReport) ProtoMessage()    {}
func (*DoctorReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{14}
}
func (m *DoctorReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorReport.Merge(m, src)
}
func (m *DoctorReport) XXX_Size() int {
	return m.Size()
}
func (m *DoctorReport) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorReport.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorReport proto.InternalMessageInfo

func (m *DoctorReport) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DoctorReport) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *DoctorReport) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *DoctorReport) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type DoctorReportRes struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	ClientId             string   `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id"`
	DoctorId             string   `protobuf:"bytes,3,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	Text                 string   `protobuf:"bytes,4,opt,name=text,proto3" json:"text"`
	CreatedAt            string   `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorReportRes) Reset()         { *m = DoctorReportRes{} }
func (m *DoctorReportRes) String() string { return proto.CompactTextString(m) }
func (*DoctorReportRes) ProtoMessage()    {}
func (*DoctorReportRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{15}
}
func (m *DoctorReportRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorReportRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorReportRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorReportRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorReportRes.Merge(m, src)
}
func (m *DoctorReportRes) XXX_Size() int {
	return m.Size()
}
func (m *DoctorReportRes) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorReportRes.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorReportRes proto.InternalMessageInfo

func (m *DoctorReportRes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DoctorReportRes) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *DoctorReportRes) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *DoctorReportRes) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *DoctorReportRes) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *DoctorReportRes) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type DoctorId struct {
	DoctorId             string   `protobuf:"bytes,1,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorId) Reset()         { *m = DoctorId{} }
func (m *DoctorId) String() string { return proto.CompactTextString(m) }
func (*DoctorId) ProtoMessage()    {}
func (*DoctorId) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{16}
}
func (m *DoctorId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorId.Merge(m, src)
}
func (m *DoctorId) XXX_Size() int {
	return m.Size()
}
func (m *DoctorId) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorId.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorId proto.InternalMessageInfo

func (m *DoctorId) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

type DoctorsFindReq struct {
	Limit                int64    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit"`
	Page                 int64    `protobuf:"varint,2,opt,name=page,proto3" json:"page"`
	Search               string   `protobuf:"bytes,3,opt,name=search,proto3" json:"search"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorsFindReq) Reset()         { *m = DoctorsFindReq{} }
func (m *DoctorsFindReq) String() string { return proto.CompactTextString(m) }
func (*DoctorsFindReq) ProtoMessage()    {}
func (*DoctorsFindReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{17}
}
func (m *DoctorsFindReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorsFindReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorsFindReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorsFindReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorsFindReq.Merge(m, src)
}
func (m *DoctorsFindReq) XXX_Size() int {
	return m.Size()
}
func (m *DoctorsFindReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorsFindReq.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorsFindReq proto.InternalMessageInfo

func (m *DoctorsFindReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DoctorsFindReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *DoctorsFindReq) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

type DoctorsResp struct {
	Doctors              []*Doctor `protobuf:"bytes,1,rep,name=doctors,proto3" json:"doctors"`
	Count                int64     `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DoctorsResp) Reset()         { *m = DoctorsResp{} }
func (m *DoctorsResp) String() string { return proto.CompactTextString(m) }
func (*DoctorsResp) ProtoMessage()    {}
func (*DoctorsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{18}
}
func (m *DoctorsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorsResp.Merge(m, src)
}
func (m *DoctorsResp) XXX_Size() int {
	return m.Size()
}
func (m *DoctorsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorsResp.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorsResp proto.InternalMessageInfo

func (m *DoctorsResp) GetDoctors() []*Doctor {
	if m != nil {
		return m.Doctors
	}
	return nil
}

func (m *DoctorsResp) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetDoctorReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDoctorReq) Reset()         { *m = GetDoctorReq{} }
func (m *GetDoctorReq) String() string { return proto.CompactTextString(m) }
func (*GetDoctorReq) ProtoMessage()    {}
func (*GetDoctorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{19}
}
func (m *GetDoctorReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDoctorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDoctorReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDoctorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDoctorReq.Merge(m, src)
}
func (m *GetDoctorReq) XXX_Size() int {
	return m.Size()
}
func (m *GetDoctorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDoctorReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDoctorReq proto.InternalMessageInfo

func (m *GetDoctorReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *GetDoctorReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Doctor struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	FirstName            string   `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	LastName             string   `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	Gender               string   `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender"`
	WorkTime             string   `protobuf:"bytes,5,opt,name=work_time,json=workTime,proto3" json:"work_time"`
	Price                float64  `protobuf:"fixed64,6,opt,name=price,proto3" json:"price"`
	Cpecialety           string   `protobuf:"bytes,7,opt,name=cpecialety,proto3" json:"cpecialety"`
	RoomNumber           string   `protobuf:"bytes,8,opt,name=room_number,json=roomNumber,proto3" json:"room_number"`
	PhoneNumber          string   `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	CreatedAt            string   `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,12,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Doctor) Reset()         { *m = Doctor{} }
func (m *Doctor) String() string { return proto.CompactTextString(m) }
func (*Doctor) ProtoMessage()    {}
func (*Doctor) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5107a06a9a1f6bc, []int{20}
}
func (m *Doctor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Doctor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Doctor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Doctor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Doctor.Merge(m, src)
}
func (m *Doctor) XXX_Size() int {
	return m.Size()
}
func (m *Doctor) XXX_DiscardUnknown() {
	xxx_messageInfo_Doctor.DiscardUnknown(m)
}

var xxx_messageInfo_Doctor proto.InternalMessageInfo

func (m *Doctor) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Doctor) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Doctor) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Doctor) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *Doctor) GetWorkTime() string {
	if m != nil {
		return m.WorkTime
	}
	return ""
}

func (m *Doctor) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Doctor) GetCpecialety() string {
	if m != nil {
		return m.Cpecialety
	}
	return ""
}

func (m *Doctor) GetRoomNumber() string {
	if m != nil {
		return m.RoomNumber
	}
	return ""
}

func (m *Doctor) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Doctor) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Doctor) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Doctor) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

func init() {
	proto.RegisterType((*DoctorType)(nil), "doctor.DoctorType")
	proto.RegisterType((*DoctorTypes)(nil), "doctor.DoctorTypes")
	proto.RegisterType((*DocPageFilter)(nil), "doctor.DocPageFilter")
	proto.RegisterType((*DocPageFilterRes)(nil), "doctor.DocPageFilterRes")
	proto.RegisterType((*DocPage)(nil), "doctor.DocPage")
	proto.RegisterType((*LowStockRes)(nil), "doctor.LowStockRes")
	proto.RegisterType((*SqladId)(nil), "doctor.SqladId")
	proto.RegisterType((*SqladGetReq)(nil), "doctor.SqladGetReq")
	proto.RegisterType((*SqladReq)(nil), "doctor.SqladReq")
	proto.RegisterType((*SqladRes)(nil), "doctor.SqladRes")
	proto.RegisterType((*ReportId)(nil), "doctor.ReportId")
	proto.RegisterType((*DoctorReportsResp)(nil), "doctor.DoctorReportsResp")
	proto.RegisterType((*DoctorReportsFindReq)(nil), "doctor.DoctorReportsFindReq")
	proto.RegisterType((*GetDoctorReport)(nil), "doctor.GetDoctorReport")
	proto.RegisterType((*DoctorReport)(nil), "doctor.DoctorReport")
	proto.RegisterType((*DoctorReportRes)(nil), "doctor.DoctorReportRes")
	proto.RegisterType((*DoctorId)(nil), "doctor.DoctorId")
	proto.RegisterType((*DoctorsFindReq)(nil), "doctor.DoctorsFindReq")
	proto.RegisterType((*DoctorsResp)(nil), "doctor.DoctorsResp")
	proto.RegisterType((*GetDoctorReq)(nil), "doctor.GetDoctorReq")
	proto.RegisterType((*Doctor)(nil), "doctor.Doctor")
}

func init() { proto.RegisterFile("doctor/doctor.proto", fileDescriptor_c5107a06a9a1f6bc) }

var fileDescriptor_c5107a06a9a1f6bc = []byte{
	// 1156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0xa5, 0x58, 0x22, 0x87, 0xb2, 0xa4, 0x6e, 0x5c, 0x5b, 0x91, 0x1b, 0xd5, 0xe5, 0xa1,
	0xf1, 0x25, 0x72, 0x61, 0xa3, 0x40, 0x13, 0xa4, 0x41, 0xdd, 0x2a, 0x31, 0x04, 0xa4, 0x46, 0x41,
	0xa7, 0x45, 0xd1, 0x0b, 0x41, 0x93, 0x2b, 0x65, 0x11, 0x8a, 0x4b, 0x91, 0x2b, 0x3b, 0xbe, 0xf7,
	0xd8, 0x63, 0x0f, 0x7d, 0x89, 0xbe, 0x41, 0x1f, 0xa0, 0xc7, 0xbe, 0x40, 0x81, 0xc0, 0x7d, 0x8b,
	0x9e, 0x8a, 0xfd, 0x93, 0x48, 0x5a, 0x72, 0x12, 0xa0, 0x3d, 0xf4, 0x24, 0xee, 0x37, 0x33, 0xbb,
	0xf3, 0xf3, 0xed, 0xec, 0x08, 0x6e, 0x87, 0x34, 0x60, 0x34, 0xdd, 0x97, 0x3f, 0xfd, 0x24, 0xa5,
	0x8c, 0xa2, 0x9a, 0x5c, 0x75, 0x77, 0xc6, 0x94, 0x8e, 0x23, 0xbc, 0x2f, 0xd0, 0xb3, 0xd9, 0x68,
	0x1f, 0x4f, 0x12, 0x76, 0x29, 0x95, 0x9c, 0xfb, 0x00, 0x03, 0xa1, 0xf6, 0xfc, 0x32, 0xc1, 0xe8,
	0x43, 0xb0, 0xa5, 0x91, 0xc7, 0x2e, 0x13, 0xdc, 0x31, 0x76, 0x8d, 0x3d, 0xcb, 0x85, 0x70, 0xae,
	0xe0, 0xfc, 0x00, 0xf6, 0x42, 0x3d, 0x43, 0x9f, 0x42, 0x23, 0xa7, 0x9f, 0x75, 0x8c, 0xdd, 0xea,
	0x9e, 0x7d, 0x80, 0xfa, 0xca, 0x8f, 0x85, 0xaa, 0x6b, 0x87, 0x39, 0xb3, 0x4d, 0x58, 0x0f, 0xe8,
	0x2c, 0x66, 0x9d, 0xca, 0xae, 0xb1, 0x57, 0x75, 0xe5, 0xc2, 0xf9, 0xc9, 0x80, 0x8d, 0x01, 0x0d,
	0xbe, 0xf1, 0xc7, 0xf8, 0x29, 0x89, 0x18, 0x4e, 0xd1, 0x0e, 0x58, 0x41, 0x44, 0x70, 0xcc, 0x3c,
	0x12, 0x0a, 0x67, 0xaa, 0xae, 0x29, 0x81, 0x61, 0xc8, 0x37, 0x89, 0xc8, 0x84, 0xcc, 0x37, 0x11,
	0x0b, 0x84, 0xe0, 0x56, 0xe2, 0x8f, 0x71, 0xa7, 0x2a, 0x40, 0xf1, 0xcd, 0xb7, 0x19, 0xa5, 0x74,
	0xe2, 0x85, 0x3e, 0xc3, 0x9d, 0x5b, 0x22, 0x26, 0x93, 0x03, 0x03, 0x9f, 0x61, 0xb4, 0x0d, 0x75,
	0x46, 0xa5, 0x68, 0x5d, 0x88, 0x6a, 0x8c, 0x72, 0x81, 0xf3, 0xa3, 0x01, 0xed, 0x82, 0x3b, 0x2e,
	0xce, 0xd0, 0x01, 0x34, 0x12, 0x9f, 0x49, 0x97, 0xe2, 0x11, 0x55, 0x01, 0xb7, 0x72, 0x01, 0x73,
	0x7d, 0xd7, 0x56, 0x4a, 0xc3, 0x78, 0x44, 0xd1, 0x23, 0xd8, 0x50, 0x49, 0x4a, 0x71, 0x42, 0x53,
	0xee, 0x30, 0x37, 0xda, 0x2e, 0x66, 0xc9, 0x15, 0x32, 0x17, 0x67, 0xae, 0x4a, 0xa9, 0x04, 0x9c,
	0x9f, 0x0d, 0xa8, 0xab, 0x6d, 0xd1, 0x47, 0xd0, 0x98, 0xce, 0xf0, 0x0c, 0x7b, 0xf1, 0x6c, 0x72,
	0x86, 0x53, 0x95, 0x12, 0x5b, 0x60, 0x27, 0x02, 0x12, 0xb1, 0xce, 0xa2, 0xc8, 0x8b, 0xfd, 0x09,
	0x16, 0x99, 0xe1, 0xb1, 0xce, 0xa2, 0xe8, 0xc4, 0x9f, 0x08, 0xfb, 0xe4, 0x05, 0x8d, 0xe7, 0xf6,
	0x55, 0x21, 0xb7, 0x05, 0xa6, 0xec, 0x3f, 0x86, 0x16, 0xcf, 0x85, 0x17, 0xf9, 0x19, 0xf3, 0xce,
	0x49, 0x46, 0x98, 0xca, 0xd8, 0x06, 0x87, 0x9f, 0xf9, 0x19, 0xfb, 0x8e, 0x83, 0x8e, 0x0b, 0xf6,
	0x33, 0x7a, 0x71, 0xca, 0x68, 0xf0, 0x92, 0xe7, 0xe5, 0x3e, 0x58, 0x11, 0xbd, 0xf0, 0x32, 0xbe,
	0x56, 0x49, 0x69, 0xeb, 0xf8, 0x4e, 0xa7, 0x91, 0x1f, 0xf2, 0xc0, 0xcc, 0x48, 0x59, 0xac, 0x20,
	0xc0, 0x1d, 0xa8, 0x0b, 0xdd, 0x61, 0x88, 0x9a, 0x50, 0x51, 0x25, 0xb7, 0xdc, 0x0a, 0x09, 0x9d,
	0x07, 0x60, 0x0b, 0xd1, 0x31, 0x66, 0x2e, 0x9e, 0x72, 0xfb, 0x11, 0xc1, 0x91, 0xd6, 0x90, 0x0b,
	0x8e, 0x9e, 0xfb, 0xd1, 0x4c, 0xc7, 0x2d, 0x17, 0xce, 0x6f, 0x06, 0x98, 0xca, 0x85, 0x69, 0x79,
	0x5f, 0x4e, 0x97, 0x5c, 0xa6, 0xc4, 0xf7, 0xc2, 0xb9, 0x6a, 0xce, 0x39, 0x8e, 0x26, 0x29, 0x09,
	0x24, 0x81, 0x0c, 0x57, 0x2e, 0x78, 0xba, 0x17, 0x71, 0xaf, 0x4b, 0x86, 0xce, 0xa3, 0xbc, 0x07,
	0x2d, 0xfc, 0x2a, 0x21, 0xa9, 0xcf, 0x08, 0x8d, 0x25, 0xc5, 0x6a, 0xe2, 0x9c, 0xe6, 0x02, 0x16,
	0x1c, 0xec, 0x82, 0x99, 0xa4, 0xf4, 0x9c, 0x84, 0x38, 0xed, 0xd4, 0x65, 0xcd, 0xf4, 0xda, 0xf9,
	0x7b, 0xe1, 0x7e, 0xf6, 0xff, 0x73, 0x1f, 0xdd, 0x05, 0x08, 0x52, 0xec, 0x33, 0x1c, 0x7a, 0x3e,
	0xeb, 0x98, 0x42, 0x6a, 0x29, 0xe4, 0x88, 0x71, 0xf1, 0x2c, 0x09, 0xb5, 0xd8, 0x92, 0x62, 0x85,
	0x1c, 0x31, 0xe7, 0x1e, 0x98, 0xf2, 0x1a, 0x0c, 0x43, 0xee, 0xab, 0xbc, 0x3f, 0xde, 0x3c, 0x05,
	0x66, 0xaa, 0x84, 0x0e, 0x81, 0xf7, 0xf2, 0xd7, 0x28, 0x73, 0x71, 0x96, 0xa0, 0xc7, 0xd0, 0x2c,
	0x5c, 0x3c, 0xdd, 0x9f, 0x56, 0xde, 0xbc, 0x8d, 0xfc, 0xcd, 0x5b, 0xd5, 0xa6, 0xbe, 0x87, 0xcd,
	0xc2, 0x51, 0x4f, 0x49, 0x1c, 0x2a, 0x4e, 0xca, 0x7e, 0x64, 0x2c, 0xeb, 0x47, 0x95, 0x5c, 0x3f,
	0xda, 0x82, 0x5a, 0x86, 0xfd, 0x34, 0x78, 0xa1, 0x2e, 0xa0, 0x5a, 0x39, 0x9f, 0x43, 0xeb, 0x18,
	0xb3, 0xfc, 0xe6, 0xef, 0x44, 0xf4, 0x08, 0x1a, 0x05, 0xdb, 0x32, 0x59, 0x0a, 0xdd, 0x54, 0xb5,
	0x86, 0x79, 0x37, 0xdd, 0x01, 0x4b, 0xe5, 0x8a, 0x84, 0xca, 0x2d, 0x53, 0x02, 0x43, 0x41, 0x33,
	0x86, 0x5f, 0xe9, 0x4e, 0x20, 0xbe, 0x9d, 0x5f, 0x0d, 0x68, 0x95, 0xf2, 0xf7, 0xdf, 0x9e, 0x58,
	0xa2, 0xd2, 0xfa, 0xcd, 0x54, 0xaa, 0x2d, 0xa1, 0xd2, 0x40, 0xef, 0x5e, 0x38, 0xda, 0x28, 0x1e,
	0xed, 0xb8, 0xd0, 0x94, 0x8a, 0xff, 0x62, 0x65, 0xbf, 0xd6, 0xcf, 0xa6, 0x24, 0xe6, 0x1e, 0xd4,
	0xe5, 0x71, 0x9a, 0x91, 0xcd, 0x12, 0x23, 0xb5, 0x78, 0x05, 0x05, 0x1f, 0x42, 0x23, 0x47, 0x94,
	0x77, 0x6b, 0x87, 0xaf, 0x2b, 0x50, 0x93, 0x96, 0xd7, 0xca, 0x75, 0x17, 0x60, 0x44, 0xd2, 0x8c,
	0xe5, 0x1f, 0x0f, 0x4b, 0x20, 0xe2, 0xf5, 0xe0, 0xcd, 0xc2, 0xd7, 0x52, 0x55, 0x30, 0x0e, 0x08,
	0xe1, 0x16, 0xd4, 0xc6, 0x38, 0xe6, 0x1d, 0x40, 0x96, 0x4c, 0xad, 0xb8, 0xd1, 0x05, 0x4d, 0x5f,
	0x7a, 0x8c, 0x4c, 0xf4, 0x03, 0x6b, 0x72, 0xe0, 0x39, 0x91, 0xad, 0x4a, 0x36, 0xa5, 0x5a, 0xbe,
	0x29, 0xf5, 0x00, 0x82, 0x04, 0x07, 0xc4, 0x8f, 0x30, 0xbb, 0x54, 0x0d, 0x25, 0x87, 0xf0, 0x21,
	0x25, 0xa5, 0x74, 0xa2, 0x1f, 0x31, 0xd9, 0x53, 0x80, 0x43, 0xea, 0x0d, 0x2b, 0x3f, 0x73, 0xd6,
	0xf5, 0x67, 0xae, 0xc8, 0x25, 0xb8, 0x99, 0x4b, 0x76, 0x89, 0x4b, 0x5c, 0x1c, 0xe2, 0x08, 0x2b,
	0x71, 0x43, 0x8a, 0x15, 0x72, 0xc4, 0x0e, 0xfe, 0xac, 0x8b, 0x41, 0x86, 0xd1, 0xf4, 0x14, 0xa7,
	0xe7, 0x3c, 0xa4, 0x4f, 0xf4, 0xd5, 0xfc, 0x4a, 0x1c, 0x81, 0x4a, 0xf5, 0xee, 0x96, 0xd6, 0xce,
	0x1a, 0x3a, 0x04, 0x4b, 0x7e, 0x1f, 0x63, 0x86, 0x36, 0xb5, 0x38, 0x5f, 0xf5, 0x25, 0x46, 0x8f,
	0xe6, 0x34, 0xe3, 0xd4, 0x45, 0x5b, 0x45, 0x05, 0xcd, 0xe7, 0xee, 0xed, 0x12, 0xce, 0x39, 0xe9,
	0xac, 0x2d, 0x9c, 0xfc, 0x56, 0x04, 0xfa, 0x16, 0x4e, 0x3e, 0xd4, 0x16, 0x03, 0x11, 0x3b, 0x6a,
	0x17, 0x35, 0x86, 0x61, 0x77, 0xab, 0x2f, 0x87, 0xcf, 0xbe, 0x1e, 0x3e, 0xfb, 0x4f, 0xf8, 0xf0,
	0xe9, 0xac, 0xa1, 0xc7, 0x3a, 0x47, 0x7c, 0x24, 0xe4, 0x41, 0xae, 0x50, 0x2d, 0x7b, 0x2b, 0x26,
	0x48, 0x67, 0x0d, 0x3d, 0x01, 0x94, 0x6f, 0x3f, 0x2a, 0xb1, 0x9b, 0xcb, 0x5a, 0x7b, 0x77, 0x55,
	0xc3, 0x17, 0xdb, 0x14, 0xba, 0x18, 0x77, 0x64, 0x7b, 0x49, 0xb6, 0xdf, 0xb4, 0xcd, 0x49, 0xe9,
	0xfd, 0x11, 0xf9, 0xff, 0x60, 0x99, 0xfe, 0xbc, 0x0a, 0x77, 0x96, 0x4a, 0x55, 0x2d, 0xbe, 0x28,
	0x46, 0x57, 0xce, 0xaf, 0x7e, 0x14, 0x6f, 0xc8, 0xef, 0xa1, 0x9a, 0x98, 0x54, 0x62, 0xca, 0xd3,
	0xd8, 0xb4, 0x7b, 0x6d, 0x3e, 0x13, 0x46, 0xa6, 0x1e, 0xb3, 0xd0, 0xed, 0x82, 0x5c, 0x0e, 0x5e,
	0x2b, 0x8c, 0xe4, 0x49, 0x8a, 0x36, 0x6f, 0x77, 0xd2, 0x67, 0xca, 0x48, 0x45, 0xd6, 0x2a, 0xa8,
	0xdc, 0x18, 0xd8, 0x03, 0x30, 0xf5, 0xe4, 0xf9, 0x66, 0xce, 0xe4, 0x66, 0x54, 0x51, 0xec, 0xb6,
	0xcc, 0x6a, 0xee, 0x3f, 0xc6, 0xfb, 0xa5, 0xd9, 0x5d, 0xc2, 0xdd, 0xce, 0x52, 0x58, 0x6c, 0xf3,
	0x65, 0xfb, 0xf7, 0xab, 0x9e, 0xf1, 0xc7, 0x55, 0xcf, 0x78, 0x7d, 0xd5, 0x33, 0x7e, 0xf9, 0xab,
	0xb7, 0x76, 0x56, 0x13, 0xe7, 0x1f, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x30, 0x58, 0x04,
	0x88, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DoctorServiceClient is the client API for DoctorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DoctorServiceClient interface {
	DoctorCreate(ctx context.Context, in *Doctor, opts ...grpc.CallOption) (*Doctor, error)
	DoctorGet(ctx context.Context, in *GetDoctorReq, opts ...grpc.CallOption) (*Doctor, error)
	DoctorsFind(ctx context.Context, in *DoctorsFindReq, opts ...grpc.CallOption) (*DoctorsResp, error)
	DoctorUpdate(ctx context.Context, in *Doctor, opts ...grpc.CallOption) (*Doctor, error)
	DoctorDelete(ctx context.Context, in *DoctorId, opts ...grpc.CallOption) (*empty.Empty, error)
	DoctorTypeGet(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DoctorTypes, error)
	// Doctor reports...
	DoctorReportCreate(ctx context.Context, in *DoctorReport, opts ...grpc.CallOption) (*DoctorReportRes, error)
	DoctorReportGet(ctx context.Context, in *GetDoctorReport, opts ...grpc.CallOption) (*DoctorReportRes, error)
	DoctorReportsFind(ctx context.Context, in *DoctorReportsFindReq, opts ...grpc.CallOption) (*DoctorReportsResp, error)
	DoctorReportDelete(ctx context.Context, in *ReportId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Sqlad
	SqladCreate(ctx context.Context, in *SqladReq, opts ...grpc.CallOption) (*SqladRes, error)
	SqladGet(ctx context.Context, in *SqladGetReq, opts ...grpc.CallOption) (*SqladRes, error)
	SqladUpdate(ctx context.Context, in *SqladReq, opts ...grpc.CallOption) (*SqladRes, error)
	SqladDelete(ctx context.Context, in *SqladId, opts ...grpc.CallOption) (*empty.Empty, error)
	LowStock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LowStockRes, error)
	// Doctor page
	DoctorPageFilter(ctx context.Context, in *DocPageFilter, opts ...grpc.CallOption) (*DocPageFilterRes, error)
}

type doctorServiceClient struct {
	cc *grpc.ClientConn
}

func NewDoctorServiceClient(cc *grpc.ClientConn) DoctorServiceClient {
	return &doctorServiceClient{cc}
}

func (c *doctorServiceClient) DoctorCreate(ctx context.Context, in *Doctor, opts ...grpc.CallOption) (*Doctor, error) {
	out := new(Doctor)
	err := c.cc.Invoke(ctx, "/doctor.DoctorService/DoctorCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) DoctorGet(ctx context.Context, in *GetDoctorReq, opts ...grpc.CallOption) (*Doctor, error) {
	out := new(Doctor)
	err := c.cc.Invoke(ctx, "/doctor.DoctorService/DoctorGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) DoctorsFind(ctx context.Context, in *DoctorsFindReq, opts ...grpc.CallOption) (*DoctorsResp, error) {
	out := new(DoctorsResp)
	err := c.cc.Invoke(ctx, "/doctor.DoctorService/DoctorsFind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) DoctorUpdate(ctx context.Context, in *Doctor, opts ...grpc.CallOption) (*Doctor, error) {
	out := new(Doctor)
	err := c.cc.Invoke(ctx, "/doctor.DoctorService/DoctorUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) DoctorDelete(ctx context.Context, in *DoctorId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/doctor.DoctorService/DoctorDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) DoctorTypeGet(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DoctorTypes, error) {
	out := new(DoctorTypes)
	err := c.cc.Invoke(ctx, "/doctor.DoctorService/DoctorTypeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) DoctorReportCreate(ctx context.Context, in *DoctorReport, opts ...grpc.CallOption) (*DoctorReportRes, error) {
	out := new(DoctorReportRes)
	err := c.cc.Invoke(ctx, "/doctor.DoctorService/DoctorReportCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) DoctorReportGet(ctx context.Context, in *GetDoctorReport, opts ...grpc.CallOption) (*DoctorReportRes, error) {
	out := new(DoctorReportRes)
	err := c.cc.Invoke(ctx, "/doctor.DoctorService/DoctorReportGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) DoctorReportsFind(ctx context.Context, in *DoctorReportsFindReq, opts ...grpc.CallOption) (*DoctorReportsResp, error) {
	out := new(DoctorReportsResp)
	err := c.cc.Invoke(ctx, "/doctor.DoctorService/DoctorReportsFind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) DoctorReportDelete(ctx context.Context, in *ReportId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/doctor.DoctorService/DoctorReportDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) SqladCreate(ctx context.Context, in *SqladReq, opts ...grpc.CallOption) (*SqladRes, error) {
	out := new(SqladRes)
	err := c.cc.Invoke(ctx, "/doctor.DoctorService/SqladCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) SqladGet(ctx context.Context, in *SqladGetReq, opts ...grpc.CallOption) (*SqladRes, error) {
	out := new(SqladRes)
	err := c.cc.Invoke(ctx, "/doctor.DoctorService/SqladGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) SqladUpdate(ctx context.Context, in *SqladReq, opts ...grpc.CallOption) (*SqladRes, error) {
	out := new(SqladRes)
	err := c.cc.Invoke(ctx, "/doctor.DoctorService/SqladUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) SqladDelete(ctx context.Context, in *SqladId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/doctor.DoctorService/SqladDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) LowStock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LowStockRes, error) {
	out := new(LowStockRes)
	err := c.cc.Invoke(ctx, "/doctor.DoctorService/LowStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) DoctorPageFilter(ctx context.Context, in *DocPageFilter, opts ...grpc.CallOption) (*DocPageFilterRes, error) {
	out := new(DocPageFilterRes)
	err := c.cc.Invoke(ctx, "/doctor.DoctorService/DoctorPageFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoctorServiceServer is the server API for DoctorService service.
type DoctorServiceServer interface {
	DoctorCreate(context.Context, *Doctor) (*Doctor, error)
	DoctorGet(context.Context, *GetDoctorReq) (*Doctor, error)
	DoctorsFind(context.Context, *DoctorsFindReq) (*DoctorsResp, error)
	DoctorUpdate(context.Context, *Doctor) (*Doctor, error)
	DoctorDelete(context.Context, *DoctorId) (*empty.Empty, error)
	DoctorTypeGet(context.Context, *empty.Empty) (*DoctorTypes, error)
	// Doctor reports...
	DoctorReportCreate(context.Context, *DoctorReport) (*DoctorReportRes, error)
	DoctorReportGet(context.Context, *GetDoctorReport) (*DoctorReportRes, error)
	DoctorReportsFind(context.Context, *DoctorReportsFindReq) (*DoctorReportsResp, error)
	DoctorReportDelete(context.Context, *ReportId) (*empty.Empty, error)
	// Sqlad
	SqladCreate(context.Context, *SqladReq) (*SqladRes, error)
	SqladGet(context.Context, *SqladGetReq) (*SqladRes, error)
	SqladUpdate(context.Context, *SqladReq) (*SqladRes, error)
	SqladDelete(context.Context, *SqladId) (*empty.Empty, error)
	LowStock(context.Context, *empty.Empty) (*LowStockRes, error)
	// Doctor page
	DoctorPageFilter(context.Context, *DocPageFilter) (*DocPageFilterRes, error)
}

// UnimplementedDoctorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDoctorServiceServer struct {
}

func (*UnimplementedDoctorServiceServer) DoctorCreate(ctx context.Context, req *Doctor) (*Doctor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoctorCreate not implemented")
}
func (*UnimplementedDoctorServiceServer) DoctorGet(ctx context.Context, req *GetDoctorReq) (*Doctor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoctorGet not implemented")
}
func (*UnimplementedDoctorServiceServer) DoctorsFind(ctx context.Context, req *DoctorsFindReq) (*DoctorsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoctorsFind not implemented")
}
func (*UnimplementedDoctorServiceServer) DoctorUpdate(ctx context.Context, req *Doctor) (*Doctor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoctorUpdate not implemented")
}
func (*UnimplementedDoctorServiceServer) DoctorDelete(ctx context.Context, req *DoctorId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoctorDelete not implemented")
}
func (*UnimplementedDoctorServiceServer) DoctorTypeGet(ctx context.Context, req *empty.Empty) (*DoctorTypes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoctorTypeGet not implemented")
}
func (*UnimplementedDoctorServiceServer) DoctorReportCreate(ctx context.Context, req *DoctorReport) (*DoctorReportRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoctorReportCreate not implemented")
}
func (*UnimplementedDoctorServiceServer) DoctorReportGet(ctx context.Context, req *GetDoctorReport) (*DoctorReportRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoctorReportGet not implemented")
}
func (*UnimplementedDoctorServiceServer) DoctorReportsFind(ctx context.Context, req *DoctorReportsFindReq) (*DoctorReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoctorReportsFind not implemented")
}
func (*UnimplementedDoctorServiceServer) DoctorReportDelete(ctx context.Context, req *ReportId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoctorReportDelete not implemented")
}
func (*UnimplementedDoctorServiceServer) SqladCreate(ctx context.Context, req *SqladReq) (*SqladRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SqladCreate not implemented")
}
func (*UnimplementedDoctorServiceServer) SqladGet(ctx context.Context, req *SqladGetReq) (*SqladRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SqladGet not implemented")
}
func (*UnimplementedDoctorServiceServer) SqladUpdate(ctx context.Context, req *SqladReq) (*SqladRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SqladUpdate not implemented")
}
func (*UnimplementedDoctorServiceServer) SqladDelete(ctx context.Context, req *SqladId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SqladDelete not implemented")
}
func (*UnimplementedDoctorServiceServer) LowStock(ctx context.Context, req *empty.Empty) (*LowStockRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LowStock not implemented")
}
func (*UnimplementedDoctorServiceServer) DoctorPageFilter(ctx context.Context, req *DocPageFilter) (*DocPageFilterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoctorPageFilter not implemented")
}

func RegisterDoctorServiceServer(s *grpc.Server, srv DoctorServiceServer) {
	s.RegisterService(&_DoctorService_serviceDesc, srv)
}

func _DoctorService_DoctorCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Doctor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).DoctorCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctor.DoctorService/DoctorCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).DoctorCreate(ctx, req.(*Doctor))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_DoctorGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).DoctorGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctor.DoctorService/DoctorGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).DoctorGet(ctx, req.(*GetDoctorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_DoctorsFind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorsFindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).DoctorsFind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctor.DoctorService/DoctorsFind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).DoctorsFind(ctx, req.(*DoctorsFindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_DoctorUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Doctor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).DoctorUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctor.DoctorService/DoctorUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).DoctorUpdate(ctx, req.(*Doctor))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_DoctorDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).DoctorDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctor.DoctorService/DoctorDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).DoctorDelete(ctx, req.(*DoctorId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_DoctorTypeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).DoctorTypeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctor.DoctorService/DoctorTypeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).DoctorTypeGet(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_DoctorReportCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).DoctorReportCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctor.DoctorService/DoctorReportCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).DoctorReportCreate(ctx, req.(*DoctorReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_DoctorReportGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).DoctorReportGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctor.DoctorService/DoctorReportGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).DoctorReportGet(ctx, req.(*GetDoctorReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_DoctorReportsFind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorReportsFindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).DoctorReportsFind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctor.DoctorService/DoctorReportsFind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).DoctorReportsFind(ctx, req.(*DoctorReportsFindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_DoctorReportDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).DoctorReportDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctor.DoctorService/DoctorReportDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).DoctorReportDelete(ctx, req.(*ReportId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_SqladCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqladReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).SqladCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctor.DoctorService/SqladCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).SqladCreate(ctx, req.(*SqladReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_SqladGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqladGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).SqladGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctor.DoctorService/SqladGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).SqladGet(ctx, req.(*SqladGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_SqladUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqladReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).SqladUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctor.DoctorService/SqladUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).SqladUpdate(ctx, req.(*SqladReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_SqladDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqladId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).SqladDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctor.DoctorService/SqladDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).SqladDelete(ctx, req.(*SqladId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_LowStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).LowStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctor.DoctorService/LowStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).LowStock(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_DoctorPageFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocPageFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).DoctorPageFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctor.DoctorService/DoctorPageFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).DoctorPageFilter(ctx, req.(*DocPageFilter))
	}
	return interceptor(ctx, in, info, handler)
}

var _DoctorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "doctor.DoctorService",
	HandlerType: (*DoctorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoctorCreate",
			Handler:    _DoctorService_DoctorCreate_Handler,
		},
		{
			MethodName: "DoctorGet",
			Handler:    _DoctorService_DoctorGet_Handler,
		},
		{
			MethodName: "DoctorsFind",
			Handler:    _DoctorService_DoctorsFind_Handler,
		},
		{
			MethodName: "DoctorUpdate",
			Handler:    _DoctorService_DoctorUpdate_Handler,
		},
		{
			MethodName: "DoctorDelete",
			Handler:    _DoctorService_DoctorDelete_Handler,
		},
		{
			MethodName: "DoctorTypeGet",
			Handler:    _DoctorService_DoctorTypeGet_Handler,
		},
		{
			MethodName: "DoctorReportCreate",
			Handler:    _DoctorService_DoctorReportCreate_Handler,
		},
		{
			MethodName: "DoctorReportGet",
			Handler:    _DoctorService_DoctorReportGet_Handler,
		},
		{
			MethodName: "DoctorReportsFind",
			Handler:    _DoctorService_DoctorReportsFind_Handler,
		},
		{
			MethodName: "DoctorReportDelete",
			Handler:    _DoctorService_DoctorReportDelete_Handler,
		},
		{
			MethodName: "SqladCreate",
			Handler:    _DoctorService_SqladCreate_Handler,
		},
		{
			MethodName: "SqladGet",
			Handler:    _DoctorService_SqladGet_Handler,
		},
		{
			MethodName: "SqladUpdate",
			Handler:    _DoctorService_SqladUpdate_Handler,
		},
		{
			MethodName: "SqladDelete",
			Handler:    _DoctorService_SqladDelete_Handler,
		},
		{
			MethodName: "LowStock",
			Handler:    _DoctorService_LowStock_Handler,
		},
		{
			MethodName: "DoctorPageFilter",
			Handler:    _DoctorService_DoctorPageFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doctor/doctor.proto",
}

func (m *DoctorType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DoctorType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.DoctorType)))
		i += copy(dAtA[i:], m.DoctorType)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DoctorTypes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorTypes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DoctorTypes) > 0 {
		for _, msg := range m.DoctorTypes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDoctor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DocPageFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocPageFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClientId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(m.ClientId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(m.Limit))
	}
	if m.Page != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(m.Page))
	}
	if len(m.FromDate) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.FromDate)))
		i += copy(dAtA[i:], m.FromDate)
	}
	if len(m.ToDate) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.ToDate)))
		i += copy(dAtA[i:], m.ToDate)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DocPageFilterRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocPageFilterRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PatientInfo) > 0 {
		for _, msg := range m.PatientInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDoctor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DoctorReport) > 0 {
		for _, msg := range m.DoctorReport {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDoctor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DocPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocPage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.QueueNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(m.QueueNumber))
	}
	if len(m.FullName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.FullName)))
		i += copy(dAtA[i:], m.FullName)
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.DateLastVisit) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.DateLastVisit)))
		i += copy(dAtA[i:], m.DateLastVisit)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LowStockRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LowStockRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LowStock) > 0 {
		for _, msg := range m.LowStock {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDoctor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SqladId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SqladId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SqladGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SqladGetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Field) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Field)))
		i += copy(dAtA[i:], m.Field)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SqladReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SqladReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(m.Count))
	}
	if m.Price != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i += 8
	}
	if m.LowStock != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(m.LowStock))
	}
	if len(m.ExpirationDate) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.ExpirationDate)))
		i += copy(dAtA[i:], m.ExpirationDate)
	}
	if len(m.Provider) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Provider)))
		i += copy(dAtA[i:], m.Provider)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SqladRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SqladRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(m.Count))
	}
	if m.Price != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i += 8
	}
	if m.LowStock != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(m.LowStock))
	}
	if len(m.ExpirationDate) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.ExpirationDate)))
		i += copy(dAtA[i:], m.ExpirationDate)
	}
	if len(m.Provider) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Provider)))
		i += copy(dAtA[i:], m.Provider)
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if len(m.UpdatedAt) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.UpdatedAt)))
		i += copy(dAtA[i:], m.UpdatedAt)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReportId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReportId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.ReportId)))
		i += copy(dAtA[i:], m.ReportId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DoctorReportsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorReportsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DoctorReports) > 0 {
		for _, msg := range m.DoctorReports {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDoctor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DoctorReportsFindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorReportsFindReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(m.Limit))
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(m.Page))
	}
	if len(m.Search) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Search)))
		i += copy(dAtA[i:], m.Search)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetDoctorReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDoctorReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Field) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Field)))
		i += copy(dAtA[i:], m.Field)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DoctorReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.ClientId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.ClientId)))
		i += copy(dAtA[i:], m.ClientId)
	}
	if len(m.DoctorId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.DoctorId)))
		i += copy(dAtA[i:], m.DoctorId)
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DoctorReportRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorReportRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.ClientId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.ClientId)))
		i += copy(dAtA[i:], m.ClientId)
	}
	if len(m.DoctorId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.DoctorId)))
		i += copy(dAtA[i:], m.DoctorId)
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if len(m.UpdatedAt) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.UpdatedAt)))
		i += copy(dAtA[i:], m.UpdatedAt)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DoctorId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DoctorId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.DoctorId)))
		i += copy(dAtA[i:], m.DoctorId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DoctorsFindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorsFindReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(m.Limit))
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(m.Page))
	}
	if len(m.Search) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Search)))
		i += copy(dAtA[i:], m.Search)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DoctorsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Doctors) > 0 {
		for _, msg := range m.Doctors {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDoctor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetDoctorReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDoctorReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Field) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Field)))
		i += copy(dAtA[i:], m.Field)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Doctor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Doctor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.Gender) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Gender)))
		i += copy(dAtA[i:], m.Gender)
	}
	if len(m.WorkTime) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.WorkTime)))
		i += copy(dAtA[i:], m.WorkTime)
	}
	if m.Price != 0 {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i += 8
	}
	if len(m.Cpecialety) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.Cpecialety)))
		i += copy(dAtA[i:], m.Cpecialety)
	}
	if len(m.RoomNumber) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.RoomNumber)))
		i += copy(dAtA[i:], m.RoomNumber)
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if len(m.UpdatedAt) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.UpdatedAt)))
		i += copy(dAtA[i:], m.UpdatedAt)
	}
	if len(m.DeletedAt) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintDoctor(dAtA, i, uint64(len(m.DeletedAt)))
		i += copy(dAtA[i:], m.DeletedAt)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintDoctor(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DoctorType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DoctorType)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorTypes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DoctorTypes) > 0 {
		for _, e := range m.DoctorTypes {
			l = e.Size()
			n += 1 + l + sovDoctor(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovDoctor(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DocPageFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientId != 0 {
		n += 1 + sovDoctor(uint64(m.ClientId))
	}
	if m.Limit != 0 {
		n += 1 + sovDoctor(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovDoctor(uint64(m.Page))
	}
	l = len(m.FromDate)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.ToDate)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DocPageFilterRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PatientInfo) > 0 {
		for _, e := range m.PatientInfo {
			l = e.Size()
			n += 1 + l + sovDoctor(uint64(l))
		}
	}
	if len(m.DoctorReport) > 0 {
		for _, e := range m.DoctorReport {
			l = e.Size()
			n += 1 + l + sovDoctor(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DocPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueueNumber != 0 {
		n += 1 + sovDoctor(uint64(m.QueueNumber))
	}
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.DateLastVisit)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LowStockRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LowStock) > 0 {
		for _, e := range m.LowStock {
			l = e.Size()
			n += 1 + l + sovDoctor(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovDoctor(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SqladId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SqladGetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SqladReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovDoctor(uint64(m.Count))
	}
	if m.Price != 0 {
		n += 9
	}
	if m.LowStock != 0 {
		n += 1 + sovDoctor(uint64(m.LowStock))
	}
	l = len(m.ExpirationDate)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SqladRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovDoctor(uint64(m.Count))
	}
	if m.Price != 0 {
		n += 9
	}
	if m.LowStock != 0 {
		n += 1 + sovDoctor(uint64(m.LowStock))
	}
	l = len(m.ExpirationDate)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReportId)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorReportsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DoctorReports) > 0 {
		for _, e := range m.DoctorReports {
			l = e.Size()
			n += 1 + l + sovDoctor(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovDoctor(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorReportsFindReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovDoctor(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovDoctor(uint64(m.Page))
	}
	l = len(m.Search)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDoctorReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorReportRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorsFindReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovDoctor(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovDoctor(uint64(m.Page))
	}
	l = len(m.Search)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Doctors) > 0 {
		for _, e := range m.Doctors {
			l = e.Size()
			n += 1 + l + sovDoctor(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovDoctor(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDoctorReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Doctor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.WorkTime)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.Price != 0 {
		n += 9
	}
	l = len(m.Cpecialety)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.RoomNumber)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovDoctor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDoctor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDoctor(x uint64) (n int) {
	return sovDoctor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DoctorType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorTypes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorTypes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorTypes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorTypes = append(m.DoctorTypes, &DoctorType{})
			if err := m.DoctorTypes[len(m.DoctorTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocPageFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocPageFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocPageFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocPageFilterRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocPageFilterRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocPageFilterRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientInfo = append(m.PatientInfo, &DocPage{})
			if err := m.PatientInfo[len(m.PatientInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorReport = append(m.DoctorReport, &DoctorReportRes{})
			if err := m.DoctorReport[len(m.DoctorReport)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueNumber", wireType)
			}
			m.QueueNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueueNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateLastVisit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateLastVisit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LowStockRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LowStockRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LowStockRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowStock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LowStock = append(m.LowStock, &SqladRes{})
			if err := m.LowStock[len(m.LowStock)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SqladId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SqladId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SqladId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SqladGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SqladGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SqladGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SqladReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SqladReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SqladReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowStock", wireType)
			}
			m.LowStock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowStock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpirationDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SqladRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SqladRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SqladRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowStock", wireType)
			}
			m.LowStock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowStock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpirationDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorReportsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorReportsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorReportsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorReports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorReports = append(m.DoctorReports, &DoctorReportRes{})
			if err := m.DoctorReports[len(m.DoctorReports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorReportsFindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorReportsFindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorReportsFindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Search = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDoctorReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDoctorReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDoctorReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorReportRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorReportRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorReportRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorsFindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorsFindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorsFindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Search = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doctors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doctors = append(m.Doctors, &Doctor{})
			if err := m.Doctors[len(m.Doctors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDoctorReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDoctorReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDoctorReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Doctor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Doctor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Doctor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpecialety", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpecialety = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDoctor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDoctor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDoctor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDoctor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDoctor
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthDoctor
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDoctor
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDoctor(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthDoctor
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDoctor = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDoctor   = fmt.Errorf("proto: integer overflow")
)
